diff -urN ../openvpn-2.4.7.orig/configure.ac openvpn-2.4.7/configure.ac
--- ../openvpn-2.4.7.orig/configure.ac	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/configure.ac	2021-03-03 23:57:44.578108648 -0800
@@ -134,6 +134,13 @@
 )
 
 AC_ARG_ENABLE(
+	[floating-tls],
+	[AS_HELP_STRING([--disable-floating-tls], [disable floating tls support (--floating-tls) @<:@default=yes@:>@])],
+	,
+	[enable_floating_tls="yes"]
+)
+
+AC_ARG_ENABLE(
 	[multihome],
 	[AS_HELP_STRING([--disable-multihome], [disable multi-homed UDP server support (--multihome) @<:@default=yes@:>@])],
 	,
@@ -1218,6 +1225,7 @@
 test "${ac_cv_header_sys_uio_h}" = "yes" && AC_DEFINE([HAVE_IOVEC], [1], [struct iovec needed for IPv6 support])
 test "${enable_server}" = "no" && AC_DEFINE([ENABLE_CLIENT_ONLY], [1], [Enable client capability only])
 test "${enable_management}" = "yes" && AC_DEFINE([ENABLE_MANAGEMENT], [1], [Enable management server capability])
+test "${enable_floating_tls}" = "yes" && AC_DEFINE([FLOATING_TLS], [1], [Enable floating-tls UDP server capability])
 test "${enable_multihome}" = "yes" && AC_DEFINE([ENABLE_MULTIHOME], [1], [Enable multi-homed UDP server capability])
 test "${enable_debug}" = "yes" && AC_DEFINE([ENABLE_DEBUG], [1], [Enable debugging support])
 test "${enable_small}" = "yes" && AC_DEFINE([ENABLE_SMALL], [1], [Enable smaller executable size])
diff -urN ../openvpn-2.4.7.orig/doc/openvpn.8 openvpn-2.4.7/doc/openvpn.8
--- ../openvpn-2.4.7.orig/doc/openvpn.8	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/doc/openvpn.8	2021-03-04 01:05:27.408383016 -0800
@@ -606,6 +606,10 @@
 option.
 .\"*********************************************************
 .TP
+.B \-\-floating-tls
+Allows tls connections to float.
+.\"*********************************************************
+.TP
 .B \-\-ipchange cmd
 Run command
 .B cmd
diff -urN ../openvpn-2.4.7.orig/src/openvpn/forward.c openvpn-2.4.7/src/openvpn/forward.c
--- ../openvpn-2.4.7.orig/src/openvpn/forward.c	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/forward.c	2021-03-04 00:00:20.639781505 -0800
@@ -50,6 +50,10 @@
 counter_type link_read_bytes_global;  /* GLOBAL */
 counter_type link_write_bytes_global; /* GLOBAL */
 
+#ifdef FLOATING_TLS
+#include "ssl.h"
+#endif
+
 /* show event wait debugging info */
 
 #ifdef ENABLE_DEBUG
@@ -960,7 +964,11 @@
          *
          * Also, update the persisted version of our packet-id.
          */
-        if (!TLS_MODE(c))
+      if (!TLS_MODE (c) 
+#ifdef FLOATING_TLS          
+          || c->options.floating_tls
+#endif
+          )
         {
             link_socket_set_outgoing_addr(&c->c2.buf, lsi, &c->c2.from, NULL, c->c2.es);
         }
@@ -1371,6 +1379,21 @@
                 /* If Socks5 over UDP, prepend header */
                 socks_preprocess_outgoing_link(c, &to_addr, &size_delta);
 
+#ifdef FLOATING_TLS            
+            if (c->c2.link_socket->info.proto == PROTO_UDP && 
+                c->options.floating_tls && 
+                c->options.tls_client)
+            {
+              if (c->floating_tls_prefix == 0)
+                RAND_bytes((uint8_t *) &c->floating_tls_prefix, sizeof(c->floating_tls_prefix));
+
+              struct buffer *buf = &c->c2.to_link;
+              uint8_t opcode = FLOATING_TLS_OPCODE | sizeof(c->floating_tls_prefix);
+              ASSERT (buf_write_prepend (buf, &c->floating_tls_prefix, sizeof (c->floating_tls_prefix)));
+              ASSERT (buf_write_prepend (buf, &opcode, sizeof (opcode)));
+            }
+#endif
+
                 /* Send packet */
                 size = link_socket_write(c->c2.link_socket,
                                          &c->c2.to_link,
diff -urN ../openvpn-2.4.7.orig/src/openvpn/init.c openvpn-2.4.7/src/openvpn/init.c
--- ../openvpn-2.4.7.orig/src/openvpn/init.c	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/init.c	2021-03-04 00:01:57.800123617 -0800
@@ -2759,6 +2759,10 @@
     to.disable_occ = !options->occ;
 #endif
 
+#ifdef FLOATING_TLS
+    to.floating_tls = options->floating_tls;
+#endif
+
     to.verify_command = options->tls_verify;
     to.verify_export_cert = options->tls_export_cert;
     to.verify_x509_type = (options->verify_x509_type & 0xff);
@@ -3487,6 +3491,10 @@
     {
         link_socket_close(c->c2.link_socket);
         c->c2.link_socket = NULL;
+#ifdef FLOATING_TLS
+        c->floating_tls_prefix = 0;
+#endif    
+
     }
 
 
diff -urN ../openvpn-2.4.7.orig/src/openvpn/mudp.c openvpn-2.4.7/src/openvpn/mudp.c
--- ../openvpn-2.4.7.orig/src/openvpn/mudp.c	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/mudp.c	2021-03-04 00:05:25.543344403 -0800
@@ -41,6 +41,10 @@
 #include <sys/inotify.h>
 #endif
 
+#ifdef FLOATING_TLS
+#include "ssl.h"
+#endif
+
 /*
  * Get a client instance based on real address.  If
  * the instance doesn't exist, create it while
@@ -54,9 +58,35 @@
     struct mroute_addr real;
     struct multi_instance *mi = NULL;
     struct hash *hash = m->hash;
+    bool ret = false;
+
+#ifdef FLOATING_TLS
+    // Check if this is a floating-tls packet
+    if (m->top.c2.buf.len > 0)
+    {
+        uint8_t c = *BPTR (&m->top.c2.buf);
+        if ((c & FLOATING_TLS_OPCODE_MASK) == FLOATING_TLS_OPCODE)
+        {
+            int len = c & FLOATING_TLS_LENGTH_MASK;
+            uint8_t *id = BPTR (&m->top.c2.buf) + 1;
+
+            if (buf_advance(&m->top.c2.buf, len + 1))
+            {
+                int i;
+                real.type = MR_ADDR_IPV4 | MR_WITH_PORT;
+                real.netbits = 0;
+                real.len = len;
+                memcpy (real.v4.addr, id, real.len);
+                ret = true;
+            }
+        }
+    }
+#endif
+    // Not a floating-tls packet
+    if (!ret)
+        ret = mroute_extract_openvpn_sockaddr (&real, &m->top.c2.from.dest, true);
 
-    if (mroute_extract_openvpn_sockaddr(&real, &m->top.c2.from.dest, true)
-        && m->top.c2.buf.len > 0)
+    if (ret)
     {
         struct hash_element *he;
         const uint32_t hv = hash_value(hash, &real);
diff -urN ../openvpn-2.4.7.orig/src/openvpn/openvpn.h openvpn-2.4.7/src/openvpn/openvpn.h
--- ../openvpn-2.4.7.orig/src/openvpn/openvpn.h	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/openvpn.h	2021-03-04 00:11:28.774820036 -0800
@@ -541,6 +541,11 @@
                                  *   taken place. */
 
     struct context_persist persist;
+
+#ifdef FLOATING_TLS
+    uint64_t floating_tls_prefix;
+#endif 
+
     /**< Persistent %context. */
     struct context_0 *c0;       /**< Level 0 %context. */
     struct context_1 c1;        /**< Level 1 %context. */
diff -urN ../openvpn-2.4.7.orig/src/openvpn/options.c openvpn-2.4.7/src/openvpn/options.c
--- ../openvpn-2.4.7.orig/src/openvpn/options.c	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/options.c	2021-03-04 00:55:57.154125568 -0800
@@ -158,6 +158,7 @@
     "                  Set n=\"infinite\" to retry indefinitely.\n"
     "--float         : Allow remote to change its IP address/port, such as through\n"
     "                  DHCP (this is the default if --remote is not used).\n"
+    "--floating-tls  : Allows floating in multi-tls sessions.\n"
     "--ipchange cmd  : Run command cmd on remote ip address initial\n"
     "                  setting or change -- execute as: cmd ip-address port#\n"
     "--port port     : TCP/UDP port # for both local and remote.\n"
@@ -1742,6 +1743,10 @@
     SHOW_BOOL(tls_exit);
 
     SHOW_STR(tls_auth_file);
+#ifdef FLOATING_TLS
+    SHOW_BOOL (floating_tls);
+#endif
+
     SHOW_STR(tls_crypt_file);
 #endif /* ENABLE_CRYPTO */
 
@@ -2740,6 +2745,9 @@
 #ifdef ENABLE_PUSH_PEER_INFO
         MUST_BE_UNDEF(push_peer_info);
 #endif
+#ifdef FLOATING_TLS
+        MUST_BE_UNDEF (floating_tls);
+#endif
         MUST_BE_UNDEF(tls_exit);
         MUST_BE_UNDEF(crl_file);
         MUST_BE_UNDEF(key_method);
@@ -6386,6 +6394,13 @@
             setenv_str(es, p[1], p[2] ? p[2] : "");
         }
     }
+#ifdef FLOATING_TLS
+    else if (streq (p[0], "floating-tls"))
+    {
+        VERIFY_PERMISSION (OPT_P_GENERAL);
+        options->floating_tls = true;
+    }
+#endif
     else if (streq(p[0], "setenv-safe") && p[1] && !p[3])
     {
         VERIFY_PERMISSION(OPT_P_SETENV);
diff -urN ../openvpn-2.4.7.orig/src/openvpn/options.h openvpn-2.4.7/src/openvpn/options.h
--- ../openvpn-2.4.7.orig/src/openvpn/options.h	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/options.h	2021-03-04 00:56:38.955912119 -0800
@@ -184,6 +184,11 @@
     /* list of options that should be ignored even if unknown */
     const char **ignore_unknown_option;
 
+
+#ifdef FLOATING_TLS
+    bool floating_tls;
+#endif
+
     /* persist parms */
     bool persist_config;
     int persist_mode;
diff -urN ../openvpn-2.4.7.orig/src/openvpn/ssl.c openvpn-2.4.7/src/openvpn/ssl.c
--- ../openvpn-2.4.7.orig/src/openvpn/ssl.c	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/ssl.c	2021-03-04 01:00:30.479746643 -0800
@@ -3376,7 +3376,12 @@
 #ifdef ENABLE_DEF_AUTH
                     && !ks->auth_deferred
 #endif
-                    && (floated || link_socket_actual_match(from, &ks->remote_addr)))
+                    && (
+
+#ifdef FLOATING_TLS
+                        multi->opt.floating_tls ||
+#endif
+                        floated || link_socket_actual_match(from, &ks->remote_addr)))
                 {
                     if (!ks->crypto_options.key_ctx_bi.initialized)
                     {
@@ -3630,7 +3635,11 @@
                 /*
                  * Verify remote IP address
                  */
-                if (!new_link && !link_socket_actual_match(&ks->remote_addr, from))
+                if (!new_link
+#ifdef FLOATING_TLS
+                  && !multi->opt.floating_tls
+#endif
+                  && !link_socket_actual_match (&ks->remote_addr, from))
                 {
                     msg(D_TLS_ERRORS, "TLS Error: Received control packet from unexpected IP addr: %s",
                         print_link_socket_actual(from, &gc));
@@ -3701,7 +3710,11 @@
                     ks->remote_addr = *from;
                     ++multi->n_sessions;
                 }
-                else if (!link_socket_actual_match(&ks->remote_addr, from))
+                else if (
+#ifdef FLOATING_TLS
+                    !multi->opt.floating_tls &&
+#endif
+                    !link_socket_actual_match (&ks->remote_addr, from))
                 {
                     msg(D_TLS_ERRORS,
                         "TLS Error: Existing session control channel packet from unknown IP address: %s",
diff -urN ../openvpn-2.4.7.orig/src/openvpn/ssl_common.h openvpn-2.4.7/src/openvpn/ssl_common.h
--- ../openvpn-2.4.7.orig/src/openvpn/ssl_common.h	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/ssl_common.h	2021-03-04 01:03:44.812870940 -0800
@@ -244,6 +244,10 @@
     int key_method;
     bool replay;
     bool single_session;
+#ifdef FLOATING_TLS
+    bool floating_tls;
+#endif
+
 #ifdef ENABLE_OCC
     bool disable_occ;
 #endif
diff -urN ../openvpn-2.4.7.orig/src/openvpn/ssl.h openvpn-2.4.7/src/openvpn/ssl.h
--- ../openvpn-2.4.7.orig/src/openvpn/ssl.h	2019-02-20 04:28:23.000000000 -0800
+++ openvpn-2.4.7/src/openvpn/ssl.h	2021-03-04 01:01:05.347008493 -0800
@@ -69,6 +69,13 @@
 #define P_FIRST_OPCODE                 1
 #define P_LAST_OPCODE                  9
 
+/* Extra opcodes for floating TLS */
+#ifdef FLOATING_TLS
+#define FLOATING_TLS_OPCODE_MASK 0xF0
+#define FLOATING_TLS_OPCODE 0xF0
+#define FLOATING_TLS_LENGTH_MASK 0x0F
+#endif
+
 /*
  * Set the max number of acknowledgments that can "hitch a ride" on an outgoing
  * non-P_ACK_V1 control packet.
